name: Go CI and Release

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ] # Trigger on version tags like v1.0, v1.2.3
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  # Build and test on pushes/PRs to main (not tags)
  build-and-test:
    # Run only on pushes/PRs to main, not on tags
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: false # Disable cache for CI builds if needed, or configure properly

    - name: Tidy modules
      run: go mod tidy

    - name: Vet
      run: go vet ./...

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  # Create release and upload cross-compiled binaries on tag pushes
  release:
    # Run only when a version tag is pushed
    if: startsWith(github.ref, 'refs/tags/v')
    # needs: build-and-test # Optional: only release if tests pass on main? Usually release runs independently on tag.
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Define target platforms
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude: # Exclude unsupported combinations if any (e.g., windows/arm64 might need specific setup)
          - goos: windows
            goarch: arm64
          # Add other exclusions if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Tidy modules # Ensure dependencies are consistent
        run: go mod tidy

      - name: Build Binary for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT_NAME="dns-benchmark-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          echo "Building for $GOOS/$GOARCH -> $OUTPUT_NAME"
          go build -o "$OUTPUT_NAME" -ldflags="-s -w" ./cmd/main.go # -ldflags shrinks binary
          ls -lh "$OUTPUT_NAME" # List file for verification

      - name: Upload Binaries to Release
        # This action creates a release if it doesn't exist,
        # then uploads files matching the pattern.
        # It runs for each matrix job, appending assets to the same release.
        uses: softprops/action-gh-release@v2
        with:
          # Use wildcard to upload the binary built in this matrix job
          files: dns-benchmark-${{ matrix.goos }}-${{ matrix.goarch }}*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
